module Main where
import Daml.Script

initializeParties: Script ()
initializeParties = do 

    bank <- allocatePartyWithHint "Banker" (PartyIdHint "Banker")
    customer <- allocatePartyWithHint "Customer" (PartyIdHint "Customer")

    --construct user-ids from text
    bankId <- validateUserId "Banker"
    customerId <- validateUserId "Customer"

    createUser (User bankId (Some bank)) [CanActAs bank]
    createUser (User customerId (Some customer)) [CanActAs customer]

    submit customer do
        createCmd LoanApplication with 
            banker = bank
            customer = customer
            amount = 100.0
    return ()




data LoanDetails = LoanDetails
    with 
        banker: Party
        customer: Party
        amount: Decimal
        existingCustomer: Optional Bool
            deriving (Eq, Show)
       

template LoanApplication 
    with 
        banker: Party
        customer: Party
        amount: Decimal
    where
        signatory customer
        observer banker
    
        key(customer, banker): (Party, Party)
        maintainer key._1

        ensure amount > 0.0

        choice ApplyForLoan: ContractId Loan
            with 
                approver: Party
            controller approver
            do 
                assertMsg "Not authorised as bank" (approver == banker)
                create Loan with 
                    details = LoanDetails with 
                        banker = banker
                        amount = amount
                        customer = customer
                        existingCustomer = Some True
        choice RejectLoan: ()
            with 
                approver: Party
            controller approver
            do 
                assertMsg "Not authorised as bank" (approver == banker)
                return ()


template Loan 
    with 
        details: LoanDetails
    where 
        signatory details.banker, details.customer
        key(details.banker, details.customer): (Party, Party)
        maintainer key._1

        ensure details.amount > 0.0

        choice PayLoan: ()
            with 
                payer: Party
            controller payer
            do 
                assertMsg "Not authorised as customer" (payer == details.customer)
                return ()
        
        nonconsuming choice ModifyLoan: ContractId Loan
            with 
                newAmount: Decimal
            controller details.banker
            do 
                assertMsg "New amount must be greater than zero" (newAmount > 0.0)
                create this with 
                    details = details with 
                        amount = newAmount
